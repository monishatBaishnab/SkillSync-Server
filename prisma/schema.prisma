generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum USER_ROLE {
  LEARNER
  TEACHER
  ADMIN
}

enum SESSION_STATUS {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum AVAILABILITY_STATUS {
  AVAILABLE
  BOOKED
}

model User {
  id               String         @id @default(uuid())
  name             String         @db.VarChar(255)
  email            String         @unique @db.VarChar(100)
  password         String
  role             USER_ROLE
  profile          String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Review           Review[]
  TeachingSessions Session[]      @relation("TeacherSession")
  LearningSessions Session[]      @relation("LearnerSession")
  isDeleted        Boolean        @default(false)
  Skill            Skill[]
  Availability     Availability[]

  @@map("users")
}

model Skill {
  id           String         @id @default(uuid())
  name         String         @db.VarChar(255)
  user_id      String
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  description  String
  image        String?
  category     String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDeleted    Boolean        @default(false)
  Session      Session[]
  Availability Availability[]
  Review       Review[]

  @@map("skills")
}

model Session {
  id           String         @id @default(uuid())
  skill_id     String
  skill        Skill          @relation(fields: [skill_id], references: [id], onDelete: Cascade)
  teacher_id   String
  teacher      User           @relation(fields: [teacher_id], references: [id], onDelete: Cascade, name: "TeacherSession")
  learner_id   String
  learner      User           @relation(fields: [learner_id], references: [id], onDelete: Cascade, name: "LearnerSession")
  session_date String
  start_time   String
  end_time     String
  status       SESSION_STATUS @default(SCHEDULED)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDeleted    Boolean        @default(false)

  @@map("sessions")
}

model Availability {
  id         String              @id @default(uuid())
  skill_id   String
  skill      Skill               @relation(fields: [skill_id], references: [id], onDelete: Cascade)
  teacher_id String
  teacher    User                @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  date       String
  start_time String
  end_time   String
  status     AVAILABILITY_STATUS
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  isDeleted  Boolean             @default(false)

  @@map("availabilities")
}

model Review {
  id          String   @id @default(uuid())
  skill_id    String
  skill       Skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade)
  reviewer_id String
  reviewer    User     @relation(fields: [reviewer_id], references: [id], onDelete: Cascade)
  rating      String
  feedback    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  @@map("reviews")
}
